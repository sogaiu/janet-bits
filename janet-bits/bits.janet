# handy thing one can do in node:
#
# > Math.pow(2, 31).toString(2)
# '10000000000000000000000000000000'
#
# http://bartaz.github.io/ieee754-visualization/
# http://dherman.github.io/float.js/

# _bits/* returns buffer content reversed from ordinary reading order
(import ./_bits)

(comment

  (_bits/to-buffer 1)
  # =>
  @"10000000000000000000000000000000"

  (_bits/to-buffer 1.5)
  # =>
  @"0000000000000000000000000000000000000000000000000001111111111100"

  (_bits/to-buffer (int/u64 "1"))
  # =>
  @"1000000000000000000000000000000000000000000000000000000000000000"

  )

(comment

  (_bits/uint32-bits 0)
  # =>
  @"00000000000000000000000000000000"

  (_bits/uint32-bits 1)
  # =>
  @"10000000000000000000000000000000"

  (_bits/uint32-bits (dec (math/pow 2 31)))
  # =>
  @"11111111111111111111111111111110"

  )

# http://bartaz.github.io/ieee754-visualization/
(comment

  (_bits/double-bits 0.0)
  # =>
  @"0000000000000000000000000000000000000000000000000000000000000000"

  (_bits/double-bits 1.0)
  # =>
  @"0000000000000000000000000000000000000000000000000000111111111100"

  (_bits/double-bits (math/pow 2 31))
  # =>
  @"0000000000000000000000000000000000000000000000000000011110000010"

  (_bits/double-bits (math/pow 2 52))
  # =>
  @"0000000000000000000000000000000000000000000000000000110011000010"

  (_bits/double-bits (math/pow 2 53))
  # =>
  @"0000000000000000000000000000000000000000000000000000001011000010"

  )

(comment

  (_bits/uint64-bits (int/u64 "0"))
  # =>
  @"0000000000000000000000000000000000000000000000000000000000000000"

  (_bits/uint64-bits (int/u64 "1"))
  # =>
  @"1000000000000000000000000000000000000000000000000000000000000000"

  # 2 ^ 32
  (_bits/uint64-bits (int/u64 "2147483648"))
  # =>
  @"0000000000000000000000000000000100000000000000000000000000000000"

  # 2 ^ 52
  (_bits/uint64-bits (int/u64 "4503599627370496"))
  # =>
  @"0000000000000000000000000000000000000000000000000000100000000000"

  # 2 ^ 63
  (_bits/uint64-bits (int/u64 "9223372036854775808"))
  # =>
  @"0000000000000000000000000000000000000000000000000000000000000001"

  # 2 ^ 64 - 1
  (_bits/uint64-bits (int/u64 "18446744073709551615"))
  # =>
  @"1111111111111111111111111111111111111111111111111111111111111111"

  )

(defn rev-buf
  "Reverse a buffer.
   Returns a new buffer with the elements in reverse order."
  [buf]
  (->> buf
       string
       string/reverse
       (buffer/blit @"")))

(comment

  (rev-buf @"abc")
  # =>
  @"cba"

  (rev-buf @"")
  # =>
  @""

  (rev-buf @"a\0b")
  # =>
  @"b\0a"

  )

(defn to-buffer
  "Return the bit pattern of value as a buffer.
  The last element of the buffer contains least significant bit information."
  [value]
  (rev-buf (_bits/to-buffer value)))

(comment

  (to-buffer 1)
  # =>
  @"00000000000000000000000000000001"

  (to-buffer 123)
  # =>
  @"00000000000000000000000001111011"

  (to-buffer 1.5)
  # =>
  @"0011111111111000000000000000000000000000000000000000000000000000"

  (to-buffer (int/u64 "32767"))
  # =>
  @"0000000000000000000000000000000000000000000000000111111111111111"

  )

(defn uint32-bits
  [value]
  (rev-buf (_bits/uint32-bits value)))

(comment

  (uint32-bits 1)
  # =>
  @"00000000000000000000000000000001"

  (uint32-bits (dec (math/pow 2 31)))
  # =>
  @"01111111111111111111111111111111"

  )

(defn double-bits
  [value]
  (rev-buf (_bits/double-bits value)))

(comment

  (double-bits 1.0)
  # =>
  @"0011111111110000000000000000000000000000000000000000000000000000"

  (double-bits -1024.5)
  # =>
  @"1100000010010000000000100000000000000000000000000000000000000000"

  (double-bits math/e)
  # =>
  @"0100000000000101101111110000101010001011000101000101011101101001"

  (double-bits math/pi)
  # =>
  @"0100000000001001001000011111101101010100010001000010110100011000"

  (double-bits math/int32-min)
  # =>
  @"1100000111100000000000000000000000000000000000000000000000000000"

  (double-bits math/int32-max)
  # =>
  @"0100000111011111111111111111111111111111110000000000000000000000"

  (double-bits math/int-min)
  # =>
  @"1100001101000000000000000000000000000000000000000000000000000000"

  (double-bits math/int-max)
  # =>
  @"0100001101000000000000000000000000000000000000000000000000000000"

  )

(defn uint64-bits
  [value]
  (rev-buf (_bits/uint64-bits value)))

(comment

  (uint64-bits (int/u64 "1"))
  # =>
  @"0000000000000000000000000000000000000000000000000000000000000001"

  (uint64-bits (int/u64 "2147483648"))
  # =>
  @"0000000000000000000000000000000010000000000000000000000000000000"

  )
